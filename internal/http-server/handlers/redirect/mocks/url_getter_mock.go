// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"errors"
	"testing"

	"url-shortener/internal/storage"
)

// URLGetterMock is a mock implementation of URLGetter interface
type URLGetterMock struct {
	t *testing.T
	// GetURLFunc allows setting custom behavior for GetURL method
	GetURLFunc func(alias string) (string, error)
	// Mock expectations
	expectations map[string]func() (string, error)
}

// NewURLGetterMock creates a new mock instance
func NewURLGetterMock(t *testing.T) *URLGetterMock {
	return &URLGetterMock{
		t: t,
		expectations: make(map[string]func() (string, error)),
		GetURLFunc: func(alias string) (string, error) {
			t.Errorf("GetURL was called but not mocked")
			return "", errors.New("not mocked")
		},
	}
}

// GetURL calls the mocked function
func (m *URLGetterMock) GetURL(alias string) (string, error) {
	return m.GetURLFunc(alias)
}

// Helper methods for common scenarios
func (m *URLGetterMock) SetGetURLSuccess(url string) {
	m.GetURLFunc = func(alias string) (string, error) {
		return url, nil
	}
}

func (m *URLGetterMock) SetGetURLError(err error) {
	m.GetURLFunc = func(alias string) (string, error) {
		return "", err
	}
}

func (m *URLGetterMock) SetGetURLNotFoundError() {
	m.GetURLFunc = func(alias string) (string, error) {
		return "", storage.ErrURLNotFound
	}
}

// On sets up expectation for a method call
func (m *URLGetterMock) On(method string, args ...interface{}) *MockExpectation {
	return &MockExpectation{
		mock:    m,
		method:  method,
		args:    args,
	}
}

// MockExpectation represents a mock expectation
type MockExpectation struct {
	mock    *URLGetterMock
	method  string
	args    []interface{}
	returns []interface{}
}

// Return sets the return values for the expectation
func (e *MockExpectation) Return(returns ...interface{}) *MockExpectation {
	e.returns = returns
	return e
}

// Once sets the expectation to be called exactly once
func (e *MockExpectation) Once() {
	if e.method == "GetURL" && len(e.args) == 1 {
		alias := e.args[0].(string)
		if len(e.returns) == 2 {
			url := e.returns[0].(string)
			err := e.returns[1]
			var errVal error
			if err != nil {
				errVal = err.(error)
			}
			e.mock.GetURLFunc = func(calledAlias string) (string, error) {
				if calledAlias == alias {
					return url, errVal
				}
				e.mock.t.Errorf("unexpected alias: expected %s, got %s", alias, calledAlias)
				return "", errors.New("unexpected alias")
			}
		}
	}
}
